from aiogram import types
from misc import dp, bot
import sqlite3
from .sqlit import info_members,info_members_ref
from math import floor

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.utils.exceptions import BotBlocked, ChatNotFound
from .sqlit import delite_user
import asyncio


ADMIN_ID_1 = 494588959  # C–∞–Ω—è
ADMIN_ID_2 = 44520977  # –ö–æ–ª—è
ADMIN_ID_3 = 678623761  # –ë–µ–∫–∏—Ä
ADMIN_ID_4 = 941730379  # –î–∂–µ–π—Å–æ–Ω
ADMIN_ID_5 = 2116984782  # –ü–∞–±–ª–æ

MODERN_ID_5 = 807911349  # –ë–∞–π–∑–∞—Ç

ADMIN_ID = [ADMIN_ID_1, ADMIN_ID_2, ADMIN_ID_4, ADMIN_ID_3, MODERN_ID_5, ADMIN_ID_5]

class refka_s(StatesGroup):
    step1 = State()
    step2 = State()

class reg(StatesGroup):
    name = State()
    fname = State()

class st_reg(StatesGroup):
    st_name = State()
    st_fname = State()
    step_q = State()
    step_regbutton = State()


class del_user(StatesGroup):
    del_name = State()
    del_fname = State()

class reg_trafik(StatesGroup):
    traf1 = State()
    traf2 = State()

class reg_trafik2(StatesGroup):
    traf1 = State()
    traf2 = State()

class reg_trafik3(StatesGroup):
    traf1 = State()
    traf2 = State()

class reg_trafik4(StatesGroup):
    traf1 = State()
    traf2 = State()

class reg_link(StatesGroup):
    traf1 = State()
    traf2 = State()

@dp.message_handler(commands=['admin'])
async def admin_ka(message: types.Message):
    id = message.from_user.id
    if id in ADMIN_ID:
        markup = types.InlineKeyboardMarkup()
        bat_a = types.InlineKeyboardButton(text='–¢—Ä–∞—Ñ–∏–∫', callback_data='list_members')
        bat_e = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='write_message')
        bat_j = types.InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', callback_data='baza')
        bat_setin = types.InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞', callback_data='settings')
        bat_refka = types.InlineKeyboardButton(text='–°—Ç–∞—Ç–∞ –ø–æ —Ä–µ—Ñ–∫–µ', callback_data='refka')

        markup.add(bat_a,bat_e)
        markup.add(bat_setin)
        markup.add(bat_j)
        markup.add(bat_refka)

        await bot.send_message(message.chat.id,'–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å',reply_markup=markup)



@dp.callback_query_handler(text='refka')
async def refka(call: types.callback_query):
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    murkap.add(bat0)

    await bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ—à–ª–∏ UTM —Å—Å—ã–ª–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É',reply_markup=murkap)
    await refka_s.step1.set()
    await bot.answer_callback_query(call.id)


@dp.message_handler(state= refka_s.step1,content_types='text')
async def refka_stat(message: types.Message, state: FSMContext):
    info = info_members_ref(message.text)
    try:
        await bot.send_message(message.chat.id, f'<b>C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ ¬´{message.text}¬ª</b>\n\n'
                                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {info[0]}\n'
                                                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–≤—É—à–µ–∫: {info[1]}\n'
                                                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–Ω–µ–π: {info[2]}\n'
                                                     f'–ù–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª: {info[3]}\n\n'
                                                     f'–ü—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤—É—à–µ–∫: {floor((int(info[1]) / (int(info[2]) + int(info[1]))) * 100)} %\n'
                                                     f'–ö–≠–§ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {round(int(info[4]) / info[0], 2)}')
    except:
        await bot.send_message(message.chat.id, f'<b>C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ ¬´{message.text}¬ª</b>\n\n'
                                                f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {info[0]}</b>\n'
                                                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–≤—É—à–µ–∫: {info[1]}\n'
                                                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–Ω–µ–π: {info[2]}\n'
                                                     f'–ù–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª: {info[3]}\n\n')

    await state.finish()




@dp.callback_query_handler(text='baza')
async def baza(call: types.callback_query):
    a = open('server.db','rb')
    await bot.send_document(chat_id=call.message.chat.id, document=a)
    await bot.answer_callback_query(callback_query_id=call.id)


@dp.callback_query_handler(text='list_members')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –¢–†–ê–§–ò–ö–ê
async def check(call: types.callback_query):
    info = info_members() # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ sqlit
    print(info[4])
    try:
        await bot.send_message(call.message.chat.id, f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {info[0]}</b>\n\n'
                                                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–≤—É—à–µ–∫: {info[1]}\n'
                                                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–Ω–µ–π: {info[2]}\n'
                                                     f'–ù–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª: {info[3]}\n\n'
                                                     f'–ü—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤—É—à–µ–∫: {floor((int(info[1]) / (int(info[2]) + int(info[1])))*100)} %\n'
                                                     f'–ö–≠–§ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {round(int(info[4]) / info[0],2)}')
    except:
        await bot.send_message(call.message.chat.id, f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {info[0]}</b>\n\n'
                                                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–≤—É—à–µ–∫: {info[1]}\n'
                                                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–Ω–µ–π: {info[2]}\n'
                                                     f'–ù–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª: {info[3]}\n\n')

    await bot.answer_callback_query(callback_query_id = call.id)


@dp.callback_query_handler(text='otemena',state='*')
async def otmena_12(call: types.callback_query, state: FSMContext):
    try:
        await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
    except:
        pass

    await bot.send_message(call.message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ')
    await state.finish()
    await bot.answer_callback_query(callback_query_id=call.id)



########################  –†–∞—Å—Å—ã–ª–∫–∞  ################################
@dp.callback_query_handler(text='write_message')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def check(call: types.callback_query, state: FSMContext):
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    murkap.add(bat0)
    await bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º',
                           reply_markup=murkap)
    await st_reg.step_q.set()
    await bot.answer_callback_query(call.id)


@dp.callback_query_handler(text='otemena', state='*')
async def otmena_12(call: types.callback_query, state: FSMContext):
    await bot.send_message(call.message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ')
    await state.finish()
    await bot.answer_callback_query(call.id)


@dp.message_handler(state=st_reg.step_q,content_types=['text', 'photo', 'video', 'video_note', 'voice'])  # –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
async def redarkt_post(message: types.Message, state: FSMContext):
    await st_reg.st_name.set()
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
    bat2 = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏', callback_data='add_but')
    murkap.add(bat1)
    murkap.add(bat2)
    murkap.add(bat0)

    await message.copy_to(chat_id=message.chat.id)
    q = message
    await state.update_data(q=q)

    await bot.send_message(chat_id=message.chat.id, text='–ü–æ—Å—Ç —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ üëÜ', reply_markup=murkap)


# –ù–ê–°–¢–†–û–ô–ö–ê –ö–ù–û–ü–û–ö
@dp.callback_query_handler(text='add_but', state=st_reg.st_name)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
async def addbutton(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Controller Bot')
    await st_reg.step_regbutton.set()
    await bot.answer_callback_query(call.id)


@dp.message_handler(state=st_reg.step_regbutton, content_types=['text'])  # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–µ
async def redarkt_button(message: types.Message, state: FSMContext):
    arr3 = message.text.split('\n')
    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    massiv_text = []
    massiv_url = []

    for but in arr3:
        new_but = but.split('-')
        massiv_text.append(new_but[0][:-1])
        massiv_url.append(new_but[1][1:])
        bat9 = types.InlineKeyboardButton(text=new_but[0][:-1], url=new_but[1][1:])
        murkap.add(bat9)

    try:
        data = await state.get_data()
        mess = data['q']  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

        await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id, message_id=mess.message_id,
                               reply_markup=murkap)

        await state.update_data(text_but=massiv_text)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞
        await state.update_data(url_but=massiv_url)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞

        murkap2 = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –º–µ–Ω—é
        bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
        bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
        murkap2.add(bat1)
        murkap2.add(bat0)

        await bot.send_message(chat_id=message.chat.id, text='–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫‚òù', reply_markup=murkap2)


    except:
        await bot.send_message(chat_id=message.chat.id, text='–û—à–∏–±–∫–∞. –û—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()


# –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò –ö–ù–û–ü–û–ö


@dp.callback_query_handler(text='send_ras', state="*")  # –†–∞—Å—Å—ã–ª–∫–∞
async def fname_step(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    data = await state.get_data()
    mess = data['q']  # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:  # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç—É –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤—É –ø—É—Å—Ç–æ–π
        text_massiv = data['text_but']
        url_massiv = data['url_but']
        for t in text_massiv:
            for u in url_massiv:
                bat = types.InlineKeyboardButton(text=t, url=u)
                murkap.add(bat)
                break

    except:
        pass

    db = sqlite3.connect('server.db')
    sql = db.cursor()
    await state.finish()
    users = sql.execute("SELECT chat_id FROM users").fetchall()
    bad = 0
    good = 0
    delit = 0
    await bot.send_message(call.message.chat.id,
                           f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(users)}</code></b>\n\n<b>–†–∞—Å—Å–ª—ã–∫–∞ –Ω–∞—á–∞—Ç–∞!</b>",
                           parse_mode="html")
    for i in users:
        await asyncio.sleep(0.03)
        try:
            await mess.copy_to(i[0], reply_markup=murkap)
            good += 1
        except (BotBlocked, ChatNotFound):
            try:
                delite_user(i[0])
                delit += 1

            except:
                pass
        except:
            bad += 1

    await bot.send_message(
        call.message.chat.id,
        "<u>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n\n</u>"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(users)}</code>\n"
        f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{good}</code>\n"
        f"<b>–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{delit}</code>\n"
        f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–æ–∫:</b> <code>{bad}</code>",
        parse_mode="html"
    )
    await bot.answer_callback_query(call.id)
#########################################################


